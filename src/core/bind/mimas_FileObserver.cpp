/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class FileObserver
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/FileObserver.h"


/** FileObserver::FileObserver()
 * include/mimas/FileObserver.h:51
 */
static int FileObserver_FileObserver(lua_State *L) {
  try {
    FileObserver *retval__ = new FileObserver();
    retval__->pushobject(L, retval__, "mimas.FileObserver", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "FileObserver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "FileObserver: Unknown exception");
  }
  return dub_error(L);
}

/** FileObserver::~FileObserver()
 * include/mimas/FileObserver.h:59
 */
static int FileObserver__FileObserver(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.FileObserver"));
    if (userdata->gc) {
      FileObserver *self = (FileObserver *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~FileObserver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~FileObserver: Unknown exception");
  }
  return dub_error(L);
}

/** void FileObserver::addPath(const char *path)
 * include/mimas/FileObserver.h:62
 */
static int FileObserver_addPath(lua_State *L) {
  try {
    FileObserver *self = *((FileObserver **)dub_checksdata(L, 1, "mimas.FileObserver"));
    const char *path = dub_checkstring(L, 2);
    self->addPath(path);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addPath: Unknown exception");
  }
  return dub_error(L);
}

/** void FileObserver::removePath(const char *path)
 * include/mimas/FileObserver.h:66
 */
static int FileObserver_removePath(lua_State *L) {
  try {
    FileObserver *self = *((FileObserver **)dub_checksdata(L, 1, "mimas.FileObserver"));
    const char *path = dub_checkstring(L, 2);
    self->removePath(path);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removePath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removePath: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int FileObserver___tostring(lua_State *L) {
  FileObserver *self = *((FileObserver **)dub_checksdata_n(L, 1, "mimas.FileObserver"));
  lua_pushfstring(L, "mimas.FileObserver: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg FileObserver_member_methods[] = {
  { "new"          , FileObserver_FileObserver },
  { "__gc"         , FileObserver__FileObserver },
  { "addPath"      , FileObserver_addPath },
  { "removePath"   , FileObserver_removePath },
  { "__tostring"   , FileObserver___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_FileObserver(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.FileObserver");
  // <mt>

  // register member methods
  luaL_register(L, NULL, FileObserver_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "FileObserver_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
