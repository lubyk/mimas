/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Callback
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Callback.h"


/** Cast (class_name)
 * 
 */
static int Callback__cast_(lua_State *L) {

  Callback *self = *((Callback **)dub_checksdata_n(L, 1, "mimas.Callback"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "mimas.QObject")) break;
      *retval__ = static_cast<QObject *>(self);
      return 1;
    }
  }
  return 0;
}

/** Callback::Callback()
 * include/mimas/Callback.h:53
 */
static int Callback_Callback(lua_State *L) {
  try {
    Callback *retval__ = new Callback();
    dub_pushudata(L, retval__, "mimas.Callback", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Callback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Callback: Unknown exception");
  }
  return dub_error(L);
}

/** virtual Callback::~Callback()
 * include/mimas/Callback.h:56
 */
static int Callback__Callback(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Callback"));
    if (userdata->gc) {
      Callback *self = (Callback *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Callback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Callback: Unknown exception");
  }
  return dub_error(L);
}

/** void Callback::connect(QObject *obj, const char *method, const char *callback)
 * include/mimas/Callback.h:59
 */
static int Callback_connect(lua_State *L) {
  try {
    Callback *self = *((Callback **)dub_checksdata(L, 1, "mimas.Callback"));
    QObject *obj = *((QObject **)dub_checksdata(L, 2, "mimas.QObject"));
    const char *method = dub_checkstring(L, 3);
    const char *callback = dub_checkstring(L, 4);
    self->connect(obj, method, callback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "connect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "connect: Unknown exception");
  }
  return dub_error(L);
}

/** QString QObject::objectName() const
 * bind/QObject.h:7
 */
static int Callback_objectName(lua_State *L) {
  try {
    Callback *self = *((Callback **)dub_checksdata(L, 1, "mimas.Callback"));
    QByteArray str_(self->objectName().toUtf8());
    lua_pushlstring(L, str_.constData(), str_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "objectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "objectName: Unknown exception");
  }
  return dub_error(L);
}

/** void QObject::setObjectName(const QString &name)
 * bind/QObject.h:8
 */
static int Callback_setObjectName(lua_State *L) {
  try {
    Callback *self = *((Callback **)dub_checksdata(L, 1, "mimas.Callback"));
    size_t name_sz_;
    const char *name = dub_checklstring(L, 2, &name_sz_);
    
    self->setObjectName(QString::fromUtf8(name, name_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setObjectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setObjectName: Unknown exception");
  }
  return dub_error(L);
}

/** QVariant QObject::property(const char *name)
 * bind/QObject.h:9
 */
static int Callback_property(lua_State *L) {
  try {
    Callback *self = *((Callback **)dub_checksdata(L, 1, "mimas.Callback"));
    const char *name = dub_checkstring(L, 2);
    pushVariantInLua(L, self->property(name));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "property: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "property: Unknown exception");
  }
  return dub_error(L);
}

/** bool QObject::setProperty(const char *name, const QVariant &value)
 * bind/QObject.h:10
 */
static int Callback_setProperty(lua_State *L) {
  try {
    Callback *self = *((Callback **)dub_checksdata(L, 1, "mimas.Callback"));
    const char *name = dub_checkstring(L, 2);
    QVariant value(variantFromLua(L, 3));
    lua_pushboolean(L, self->setProperty(name, value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setProperty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setProperty: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Callback___tostring(lua_State *L) {
  Callback *self = *((Callback **)dub_checksdata_n(L, 1, "mimas.Callback"));
  lua_pushfstring(L, "mimas.Callback: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Callback_member_methods[] = {
  { "_cast_"       , Callback__cast_      },
  { "new"          , Callback_Callback    },
  { "__gc"         , Callback__Callback   },
  { "connect"      , Callback_connect     },
  { "objectName"   , Callback_objectName  },
  { "setObjectName", Callback_setObjectName },
  { "property"     , Callback_property    },
  { "setProperty"  , Callback_setProperty },
  { "__tostring"   , Callback___tostring  },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Callback(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Callback");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Callback_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Callback");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
