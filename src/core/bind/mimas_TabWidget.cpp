/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class TabWidget
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/TabWidget.h"


/** Cast (class_name)
 * 
 */
static int TabWidget__cast_(lua_State *L) {

  TabWidget *self = *((TabWidget **)dub_checksdata_n(L, 1, "mimas.TabWidget"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** TabWidget::TabWidget(QWidget *parent=NULL)
 * include/mimas/TabWidget.h:48
 */
static int TabWidget_TabWidget(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      QWidget *parent = *((QWidget **)dub_checksdata(L, 1, "mimas.QWidget"));
      TabWidget *retval__ = new TabWidget(parent);
      retval__->pushobject(L, retval__, "mimas.TabWidget", true);
      return 1;
    } else {
      TabWidget *retval__ = new TabWidget();
      retval__->pushobject(L, retval__, "mimas.TabWidget", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "TabWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "TabWidget: Unknown exception");
  }
  return dub_error(L);
}

/** TabWidget::~TabWidget()
 * include/mimas/TabWidget.h:51
 */
static int TabWidget__TabWidget(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.TabWidget"));
    if (userdata->gc) {
      TabWidget *self = (TabWidget *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~TabWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~TabWidget: Unknown exception");
  }
  return dub_error(L);
}

/** int TabWidget::insertTab(int pos, QWidget *page, const char *name)
 * include/mimas/TabWidget.h:60
 */
static int TabWidget_insertTab(lua_State *L) {
  try {
    TabWidget *self = *((TabWidget **)dub_checksdata(L, 1, "mimas.TabWidget"));
    int pos = dub_checkint(L, 2);
    QWidget *page = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
    const char *name = dub_checkstring(L, 4);
    lua_pushnumber(L, self->insertTab(pos, page, name));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "insertTab: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insertTab: Unknown exception");
  }
  return dub_error(L);
}

/** int TabWidget::addTab(QWidget *page, const char *name)
 * include/mimas/TabWidget.h:70
 */
static int TabWidget_addTab(lua_State *L) {
  try {
    TabWidget *self = *((TabWidget **)dub_checksdata(L, 1, "mimas.TabWidget"));
    QWidget *page = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
    const char *name = dub_checkstring(L, 3);
    lua_pushnumber(L, self->addTab(page, name));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addTab: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addTab: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize TabWidget::currentIndex(lua_State *L)
 * include/mimas/TabWidget.h:77
 */
static int TabWidget_currentIndex(lua_State *L) {
  try {
    TabWidget *self = *((TabWidget **)dub_checksdata(L, 1, "mimas.TabWidget"));
    return self->currentIndex(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "currentIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "currentIndex: Unknown exception");
  }
  return dub_error(L);
}

/** void TabWidget::setCurrentIndex(int idx)
 * include/mimas/TabWidget.h:89
 */
static int TabWidget_setCurrentIndex(lua_State *L) {
  try {
    TabWidget *self = *((TabWidget **)dub_checksdata(L, 1, "mimas.TabWidget"));
    int idx = dub_checkint(L, 2);
    self->setCurrentIndex(idx);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCurrentIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCurrentIndex: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int TabWidget___tostring(lua_State *L) {
  TabWidget *self = *((TabWidget **)dub_checksdata_n(L, 1, "mimas.TabWidget"));
  lua_pushfstring(L, "mimas.TabWidget: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg TabWidget_member_methods[] = {
  { "_cast_"       , TabWidget__cast_     },
  { "new"          , TabWidget_TabWidget  },
  { "__gc"         , TabWidget__TabWidget },
  { "insertTab"    , TabWidget_insertTab  },
  { "addTab"       , TabWidget_addTab     },
  { "currentIndex" , TabWidget_currentIndex },
  { "setCurrentIndex", TabWidget_setCurrentIndex },
  { "__tostring"   , TabWidget___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_TabWidget(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.TabWidget");
  // <mt>

  // register member methods
  luaL_register(L, NULL, TabWidget_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "TabWidget");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
