/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Menu
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Menu.h"


/** Cast (class_name)
 * 
 */
static int Menu__cast_(lua_State *L) {

  Menu *self = *((Menu **)dub_checksdata_n(L, 1, "mimas.Menu"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** Menu::Menu(const char *name="")
 * include/mimas/Menu.h:51
 */
static int Menu_Menu(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      const char *name = dub_checkstring(L, 1);
      Menu *retval__ = new Menu(name);
      retval__->pushobject(L, retval__, "mimas.Menu", true);
      return 1;
    } else {
      Menu *retval__ = new Menu();
      retval__->pushobject(L, retval__, "mimas.Menu", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Menu: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Menu: Unknown exception");
  }
  return dub_error(L);
}

/** Menu::~Menu()
 * include/mimas/Menu.h:54
 */
static int Menu__Menu(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Menu"));
    if (userdata->gc) {
      Menu *self = (Menu *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Menu: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Menu: Unknown exception");
  }
  return dub_error(L);
}

/** void Menu::popup(int gx, int gy)
 * include/mimas/Menu.h:57
 */
static int Menu_popup(lua_State *L) {
  try {
    Menu *self = *((Menu **)dub_checksdata(L, 1, "mimas.Menu"));
    int gx = dub_checkint(L, 2);
    int gy = dub_checkint(L, 3);
    self->popup(gx, gy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "popup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "popup: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Menu___tostring(lua_State *L) {
  Menu *self = *((Menu **)dub_checksdata_n(L, 1, "mimas.Menu"));
  lua_pushfstring(L, "mimas.Menu: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Menu_member_methods[] = {
  { "_cast_"       , Menu__cast_          },
  { "new"          , Menu_Menu            },
  { "__gc"         , Menu__Menu           },
  { "popup"        , Menu_popup           },
  { "__tostring"   , Menu___tostring      },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Menu(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Menu");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Menu_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Menu");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
