/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class LineEdit
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/LineEdit.h"


/** Cast (class_name)
 * 
 */
static int LineEdit__cast_(lua_State *L) {

  LineEdit *self = *((LineEdit **)dub_checksdata_n(L, 1, "mimas.LineEdit"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** LineEdit::LineEdit(const char *content=NULL, QWidget *parent=NULL)
 * include/mimas/LineEdit.h:49
 */
static int LineEdit_LineEdit(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *content = dub_checkstring(L, 1);
      QWidget *parent = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      LineEdit *retval__ = new LineEdit(content, parent);
      retval__->pushobject(L, retval__, "mimas.LineEdit", true);
      return 1;
    } else if (top__ >= 1) {
      const char *content = dub_checkstring(L, 1);
      LineEdit *retval__ = new LineEdit(content);
      retval__->pushobject(L, retval__, "mimas.LineEdit", true);
      return 1;
    } else {
      LineEdit *retval__ = new LineEdit();
      retval__->pushobject(L, retval__, "mimas.LineEdit", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "LineEdit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "LineEdit: Unknown exception");
  }
  return dub_error(L);
}

/** LineEdit::~LineEdit()
 * include/mimas/LineEdit.h:57
 */
static int LineEdit__LineEdit(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.LineEdit"));
    if (userdata->gc) {
      LineEdit *self = (LineEdit *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~LineEdit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~LineEdit: Unknown exception");
  }
  return dub_error(L);
}

/** void LineEdit::setFocus()
 * include/mimas/LineEdit.h:62
 */
static int LineEdit_setFocus(lua_State *L) {
  try {
    LineEdit *self = *((LineEdit **)dub_checksdata(L, 1, "mimas.LineEdit"));
    self->setFocus();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFocus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFocus: Unknown exception");
  }
  return dub_error(L);
}

/** void LineEdit::setFocusPolicy(int policy)
 * include/mimas/LineEdit.h:66
 */
static int LineEdit_setFocusPolicy(lua_State *L) {
  try {
    LineEdit *self = *((LineEdit **)dub_checksdata(L, 1, "mimas.LineEdit"));
    int policy = dub_checkint(L, 2);
    self->setFocusPolicy(policy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFocusPolicy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFocusPolicy: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int LineEdit___tostring(lua_State *L) {
  LineEdit *self = *((LineEdit **)dub_checksdata_n(L, 1, "mimas.LineEdit"));
  lua_pushfstring(L, "mimas.LineEdit: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg LineEdit_member_methods[] = {
  { "_cast_"       , LineEdit__cast_      },
  { "new"          , LineEdit_LineEdit    },
  { "__gc"         , LineEdit__LineEdit   },
  { "setFocus"     , LineEdit_setFocus    },
  { "setFocusPolicy", LineEdit_setFocusPolicy },
  { "__tostring"   , LineEdit___tostring  },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_LineEdit(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.LineEdit");
  // <mt>

  // register member methods
  luaL_register(L, NULL, LineEdit_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "LineEdit_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
