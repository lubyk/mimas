/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Brush
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Brush.h"


/** Brush::Brush()
 * include/mimas/Brush.h:44
 */
static int Brush_Brush(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float h = dub_checknumber(L, 1);
      float s = dub_checknumber(L, 2);
      float v = dub_checknumber(L, 3);
      float a = dub_checknumber(L, 4);
      int style = dub_checkint(L, 5);
      Brush *retval__ = new Brush(h, s, v, a, style);
      dub_pushudata(L, retval__, "mimas.Brush", true);
      return 1;
    } else if (top__ >= 4) {
      float h = dub_checknumber(L, 1);
      float s = dub_checknumber(L, 2);
      float v = dub_checknumber(L, 3);
      float a = dub_checknumber(L, 4);
      Brush *retval__ = new Brush(h, s, v, a);
      dub_pushudata(L, retval__, "mimas.Brush", true);
      return 1;
    } else if (top__ >= 3) {
      float h = dub_checknumber(L, 1);
      float s = dub_checknumber(L, 2);
      float v = dub_checknumber(L, 3);
      Brush *retval__ = new Brush(h, s, v);
      dub_pushudata(L, retval__, "mimas.Brush", true);
      return 1;
    } else if (top__ >= 2) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float h = dub_checknumber(L, 1);
        float s = dub_checknumber(L, 2);
        Brush *retval__ = new Brush(h, s);
        dub_pushudata(L, retval__, "mimas.Brush", true);
        return 1;
      } else {
        Color *color = *((Color **)dub_checksdata(L, 1, "mimas.Color"));
        int style = dub_checkint(L, 2);
        Brush *retval__ = new Brush(*color, style);
        dub_pushudata(L, retval__, "mimas.Brush", true);
        return 1;
      }
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float h = dub_checknumber(L, 1);
        Brush *retval__ = new Brush(h);
        dub_pushudata(L, retval__, "mimas.Brush", true);
        return 1;
      } else {
        Color *color = *((Color **)dub_checksdata(L, 1, "mimas.Color"));
        Brush *retval__ = new Brush(*color);
        dub_pushudata(L, retval__, "mimas.Brush", true);
        return 1;
      }
    } else {
      Brush *retval__ = new Brush();
      dub_pushudata(L, retval__, "mimas.Brush", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** Brush::~Brush()
 * include/mimas/Brush.h:53
 */
static int Brush__Brush(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Brush"));
    if (userdata->gc) {
      Brush *self = (Brush *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void Brush::setStyle(int style)
 * include/mimas/Brush.h:56
 */
static int Brush_setStyle(lua_State *L) {
  try {
    Brush *self = *((Brush **)dub_checksdata(L, 1, "mimas.Brush"));
    int style = dub_checkint(L, 2);
    self->setStyle(style);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setStyle: Unknown exception");
  }
  return dub_error(L);
}

/** void Brush::setColor(const Color &color)
 * include/mimas/Brush.h:60
 */
static int Brush_setColor(lua_State *L) {
  try {
    Brush *self = *((Brush **)dub_checksdata(L, 1, "mimas.Brush"));
    Color *color = *((Color **)dub_checksdata(L, 2, "mimas.Color"));
    self->setColor(*color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColor: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Brush___tostring(lua_State *L) {
  Brush *self = *((Brush **)dub_checksdata_n(L, 1, "mimas.Brush"));
  lua_pushfstring(L, "mimas.Brush: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Brush_member_methods[] = {
  { "new"          , Brush_Brush          },
  { "__gc"         , Brush__Brush         },
  { "setStyle"     , Brush_setStyle       },
  { "setColor"     , Brush_setColor       },
  { "__tostring"   , Brush___tostring     },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Brush(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Brush");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Brush_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Brush", "Brush");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
