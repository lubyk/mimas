/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class LegacyGLWidget
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/LegacyGLWidget.h"


/** Cast (class_name)
 * 
 */
static int LegacyGLWidget__cast_(lua_State *L) {

  LegacyGLWidget *self = *((LegacyGLWidget **)dub_checksdata_n(L, 1, "mimas.LegacyGLWidget"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, " QWidget ")) break;
      *retval__ = static_cast< QWidget  *>(self);
      return 1;
    }
  }
  return 0;
}

/** LegacyGLWidget::LegacyGLWidget()
 * include/mimas/LegacyGLWidget.h:75
 */
static int LegacyGLWidget_LegacyGLWidget(lua_State *L) {
  try {
    LegacyGLWidget *retval__ = new LegacyGLWidget();
    retval__->pushobject(L, retval__, "mimas.LegacyGLWidget", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "LegacyGLWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "LegacyGLWidget: Unknown exception");
  }
  return dub_error(L);
}

/** LegacyGLWidget::~LegacyGLWidget()
 * include/mimas/LegacyGLWidget.h:88
 */
static int LegacyGLWidget__LegacyGLWidget(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.LegacyGLWidget"));
    if (userdata->gc) {
      LegacyGLWidget *self = (LegacyGLWidget *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~LegacyGLWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~LegacyGLWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void LegacyGLWidget::addWidgetToScene(QWidget *widget, float x=0, float y=0)
 * include/mimas/LegacyGLWidget.h:91
 */
static int LegacyGLWidget_addWidgetToScene(lua_State *L) {
  try {
    LegacyGLWidget *self = *((LegacyGLWidget **)dub_checksdata(L, 1, "mimas.LegacyGLWidget"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      self->addWidgetToScene(widget, x, y);
      return 0;
    } else if (top__ >= 3) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      float x = dub_checknumber(L, 3);
      self->addWidgetToScene(widget, x);
      return 0;
    } else {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      self->addWidgetToScene(widget);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addWidgetToScene: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addWidgetToScene: Unknown exception");
  }
  return dub_error(L);
}

/** void LegacyGLWidget::update()
 * include/mimas/LegacyGLWidget.h:99
 */
static int LegacyGLWidget_update(lua_State *L) {
  try {
    LegacyGLWidget *self = *((LegacyGLWidget **)dub_checksdata(L, 1, "mimas.LegacyGLWidget"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int LegacyGLWidget___tostring(lua_State *L) {
  LegacyGLWidget *self = *((LegacyGLWidget **)dub_checksdata_n(L, 1, "mimas.LegacyGLWidget"));
  lua_pushfstring(L, "mimas.LegacyGLWidget: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg LegacyGLWidget_member_methods[] = {
  { "_cast_"       , LegacyGLWidget__cast_ },
  { "new"          , LegacyGLWidget_LegacyGLWidget },
  { "__gc"         , LegacyGLWidget__LegacyGLWidget },
  { "addWidgetToScene", LegacyGLWidget_addWidgetToScene },
  { "update"       , LegacyGLWidget_update },
  { "__tostring"   , LegacyGLWidget___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_LegacyGLWidget(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.LegacyGLWidget");
  // <mt>

  // register member methods
  luaL_register(L, NULL, LegacyGLWidget_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "LegacyGLWidget");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
