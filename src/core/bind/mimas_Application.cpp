/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Application
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Application.h"


/** Application::Application()
 * include/mimas/Application.h:52
 */
static int Application_Application(lua_State *L) {
  try {
    Application *retval__ = new Application();
    dub_pushudata(L, retval__, "mimas.Application", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Application: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Application: Unknown exception");
  }
  return dub_error(L);
}

/** Application::~Application()
 * include/mimas/Application.h:59
 */
static int Application__Application(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Application"));
    if (userdata->gc) {
      Application *self = (Application *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Application: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Application: Unknown exception");
  }
  return dub_error(L);
}

/** int Application::exec()
 * include/mimas/Application.h:63
 */
static int Application_exec(lua_State *L) {
  try {
    Application *self = *((Application **)dub_checksdata(L, 1, "mimas.Application"));
    lua_pushnumber(L, self->exec());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "exec: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "exec: Unknown exception");
  }
  return dub_error(L);
}

/** void Application::quit()
 * include/mimas/Application.h:70
 */
static int Application_quit(lua_State *L) {
  try {
    Application *self = *((Application **)dub_checksdata(L, 1, "mimas.Application"));
    self->quit();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "quit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "quit: Unknown exception");
  }
  return dub_error(L);
}


/** LuaStackSize Application::styleSheet(lua_State *L)
 * include/mimas/Application.h:78
 */
static int Application_styleSheet(lua_State *L) {
  try {
    Application *self = *((Application **)dub_checksdata(L, 1, "mimas.Application"));
    return self->getStyleSheet(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "styleSheet: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "styleSheet: Unknown exception");
  }
  return dub_error(L);
}


// --=============================================== METHODS

static const struct luaL_Reg Application_member_methods[] = {
  { "new"          , Application_Application },
  { "__gc"         , Application__Application },
  { "exec"         , Application_exec     },
  { "quit"         , Application_quit     },
  { "styleSheet"   , Application_styleSheet },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub_const_Reg Application_const[] = {
  { "Desktop"      , Application::Desktop },
  { "Plugin"       , Application::Plugin  },
  { NULL, 0},
};

extern "C" int luaopen_mimas_Application(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Application");
  // <mt>
  // register class constants
  dub_register_const(L, Application_const);

  // register member methods
  luaL_register(L, NULL, Application_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Application_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
