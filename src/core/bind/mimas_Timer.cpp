/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Timer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Timer.h"


/** Cast (class_name)
 * 
 */
static int Timer__cast_(lua_State *L) {

  Timer *self = *((Timer **)dub_checksdata_n(L, 1, "mimas.Timer"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "mimas.QObject")) break;
      *retval__ = static_cast<QObject *>(self);
      return 1;
    }
  }
  return 0;
}

/** Timer::Timer(int timeout)
 * include/mimas/Timer.h:50
 */
static int Timer_Timer(lua_State *L) {
  try {
    int timeout = dub_checkint(L, 1);
    Timer *retval__ = new Timer(timeout);
    retval__->pushobject(L, retval__, "mimas.Timer", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Timer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Timer: Unknown exception");
  }
  return dub_error(L);
}

/** virtual Timer::~Timer()
 * include/mimas/Timer.h:57
 */
static int Timer__Timer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Timer"));
    if (userdata->gc) {
      Timer *self = (Timer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Timer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Timer: Unknown exception");
  }
  return dub_error(L);
}

/** void Timer::start(int timeout)
 * include/mimas/Timer.h:60
 */
static int Timer_start(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int timeout = dub_checkint(L, 2);
      self->start(timeout);
      return 0;
    } else {
      self->start();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "start: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "start: Unknown exception");
  }
  return dub_error(L);
}

/** void Timer::stop()
 * include/mimas/Timer.h:68
 */
static int Timer_stop(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub_error(L);
}

/** void Timer::setInterval(int msec)
 * include/mimas/Timer.h:72
 */
static int Timer_setInterval(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    int msec = dub_checkint(L, 2);
    self->setInterval(msec);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterval: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterval: Unknown exception");
  }
  return dub_error(L);
}

/** QString QObject::objectName() const
 * bind/QObject.h:7
 */
static int Timer_objectName(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    QByteArray str_(self->objectName().toUtf8());
    lua_pushlstring(L, str_.constData(), str_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "objectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "objectName: Unknown exception");
  }
  return dub_error(L);
}

/** void QObject::setObjectName(const QString &name)
 * bind/QObject.h:8
 */
static int Timer_setObjectName(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    size_t name_sz_;
    const char *name = dub_checklstring(L, 2, &name_sz_);
    
    self->setObjectName(QString::fromUtf8(name, name_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setObjectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setObjectName: Unknown exception");
  }
  return dub_error(L);
}

/** QVariant QObject::property(const char *name)
 * bind/QObject.h:9
 */
static int Timer_property(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    const char *name = dub_checkstring(L, 2);
    return pushVariantInLua(L, self->property(name));
  } catch (std::exception &e) {
    lua_pushfstring(L, "property: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "property: Unknown exception");
  }
  return dub_error(L);
}

/** bool QObject::setProperty(const char *name, const QVariant &value)
 * bind/QObject.h:10
 */
static int Timer_setProperty(lua_State *L) {
  try {
    Timer *self = *((Timer **)dub_checksdata(L, 1, "mimas.Timer"));
    const char *name = dub_checkstring(L, 2);
    QVariant value(variantFromLua(L, 3));
    lua_pushboolean(L, self->setProperty(name, value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setProperty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setProperty: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Timer___tostring(lua_State *L) {
  Timer *self = *((Timer **)dub_checksdata_n(L, 1, "mimas.Timer"));
  lua_pushfstring(L, "mimas.Timer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Timer_member_methods[] = {
  { "_cast_"       , Timer__cast_         },
  { "new"          , Timer_Timer          },
  { "__gc"         , Timer__Timer         },
  { "start"        , Timer_start          },
  { "stop"         , Timer_stop           },
  { "setInterval"  , Timer_setInterval    },
  { "objectName"   , Timer_objectName     },
  { "setObjectName", Timer_setObjectName  },
  { "property"     , Timer_property       },
  { "setProperty"  , Timer_setProperty    },
  { "__tostring"   , Timer___tostring     },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Timer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Timer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Timer_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Timer_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
