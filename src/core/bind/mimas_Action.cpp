/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Action
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Action.h"


/** Cast (class_name)
 * 
 */
static int Action__cast_(lua_State *L) {

  Action *self = *((Action **)dub_checksdata_n(L, 1, "mimas.Action"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** Action::Action(const char *name, QObject *parent=0)
 * include/mimas/Action.h:47
 */
static int Action_Action(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *name = dub_checkstring(L, 1);
      QObject *parent = *((QObject **)dub_checksdata(L, 2, "mimas.QObject"));
      Action *retval__ = new Action(name, parent);
      retval__->pushobject(L, retval__, "mimas.Action", true);
      return 1;
    } else {
      const char *name = dub_checkstring(L, 1);
      Action *retval__ = new Action(name);
      retval__->pushobject(L, retval__, "mimas.Action", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Action: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Action: Unknown exception");
  }
  return dub_error(L);
}

/** void Action::setShortcut(const char *sequence)
 * include/mimas/Action.h:55
 */
static int Action_setShortcut(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    const char *sequence = dub_checkstring(L, 2);
    self->setShortcut(sequence);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setShortcut: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setShortcut: Unknown exception");
  }
  return dub_error(L);
}

/** void Action::setMenuRole(int role)
 * include/mimas/Action.h:61
 */
static int Action_setMenuRole(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    int role = dub_checkint(L, 2);
    self->setMenuRole(role);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMenuRole: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMenuRole: Unknown exception");
  }
  return dub_error(L);
}

/** Action::~Action()
 * include/mimas/Action.h:65
 */
static int Action__Action(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Action"));
    if (userdata->gc) {
      Action *self = (Action *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Action: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Action: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Action___tostring(lua_State *L) {
  Action *self = *((Action **)dub_checksdata_n(L, 1, "mimas.Action"));
  lua_pushfstring(L, "mimas.Action: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Action_member_methods[] = {
  { "_cast_"       , Action__cast_        },
  { "new"          , Action_Action        },
  { "setShortcut"  , Action_setShortcut   },
  { "setMenuRole"  , Action_setMenuRole   },
  { "__gc"         , Action__Action       },
  { "__tostring"   , Action___tostring    },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Action(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Action");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Action_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Action");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
