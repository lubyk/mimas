/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Action
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Action.h"


/** Cast (class_name)
 * 
 */
static int Action__cast_(lua_State *L) {

  Action *self = *((Action **)dub_checksdata_n(L, 1, "mimas.Action"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "mimas.QAction")) break;
      *retval__ = static_cast<QAction *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "mimas.QObject")) break;
      *retval__ = static_cast<QObject *>(self);
      return 1;
    }
  }
  return 0;
}

/** Action::Action(const char *name, QObject *parent=0)
 * include/mimas/Action.h:48
 */
static int Action_Action(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *name = dub_checkstring(L, 1);
      QObject *parent = *((QObject **)dub_checksdata(L, 2, "mimas.QObject"));
      Action *retval__ = new Action(name, parent);
      retval__->pushobject(L, retval__, "mimas.Action", true);
      return 1;
    } else {
      const char *name = dub_checkstring(L, 1);
      Action *retval__ = new Action(name);
      retval__->pushobject(L, retval__, "mimas.Action", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Action: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Action: Unknown exception");
  }
  return dub_error(L);
}

/** void Action::setShortcut(const char *sequence)
 * include/mimas/Action.h:56
 */
static int Action_setShortcut(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    const char *sequence = dub_checkstring(L, 2);
    self->setShortcut(sequence);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setShortcut: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setShortcut: Unknown exception");
  }
  return dub_error(L);
}

/** void Action::setMenuRole(int role)
 * include/mimas/Action.h:62
 */
static int Action_setMenuRole(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    int role = dub_checkint(L, 2);
    self->setMenuRole(role);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMenuRole: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMenuRole: Unknown exception");
  }
  return dub_error(L);
}

/** Action::~Action()
 * include/mimas/Action.h:66
 */
static int Action__Action(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Action"));
    if (userdata->gc) {
      Action *self = (Action *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Action: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Action: Unknown exception");
  }
  return dub_error(L);
}

/** QString QAction::text()
 * bind/QAction.h:11
 */
static int Action_text(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    QByteArray str_(self->text().toUtf8());
    lua_pushlstring(L, str_.constData(), str_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "text: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "text: Unknown exception");
  }
  return dub_error(L);
}

/** void QAction::setText(const QString &txt)
 * bind/QAction.h:12
 */
static int Action_setText(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    size_t txt_sz_;
    const char *txt = dub_checklstring(L, 2, &txt_sz_);
    
    self->setText(QString::fromUtf8(txt, txt_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setText: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setText: Unknown exception");
  }
  return dub_error(L);
}

/** bool QAction::isChecked() const
 * bind/QAction.h:13
 */
static int Action_isChecked(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    lua_pushboolean(L, self->isChecked());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isChecked: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isChecked: Unknown exception");
  }
  return dub_error(L);
}

/** void QAction::setChecked(bool on)
 * bind/QAction.h:14
 */
static int Action_setChecked(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    bool on = dub_checkboolean(L, 2);
    self->setChecked(on);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setChecked: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setChecked: Unknown exception");
  }
  return dub_error(L);
}

/** bool QAction::isEnabled() const
 * bind/QAction.h:15
 */
static int Action_isEnabled(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    lua_pushboolean(L, self->isEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void QAction::setEnabled(bool on)
 * bind/QAction.h:16
 */
static int Action_setEnabled(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    bool on = dub_checkboolean(L, 2);
    self->setEnabled(on);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** bool QAction::isCheckable() const
 * bind/QAction.h:17
 */
static int Action_isCheckable(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    lua_pushboolean(L, self->isCheckable());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isCheckable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isCheckable: Unknown exception");
  }
  return dub_error(L);
}

/** void QAction::setCheckable(bool on)
 * bind/QAction.h:18
 */
static int Action_setCheckable(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    bool on = dub_checkboolean(L, 2);
    self->setCheckable(on);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCheckable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCheckable: Unknown exception");
  }
  return dub_error(L);
}

/** QString QObject::objectName() const
 * bind/QObject.h:7
 */
static int Action_objectName(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    QByteArray str_(self->objectName().toUtf8());
    lua_pushlstring(L, str_.constData(), str_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "objectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "objectName: Unknown exception");
  }
  return dub_error(L);
}

/** void QObject::setObjectName(const QString &name)
 * bind/QObject.h:8
 */
static int Action_setObjectName(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    size_t name_sz_;
    const char *name = dub_checklstring(L, 2, &name_sz_);
    
    self->setObjectName(QString::fromUtf8(name, name_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setObjectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setObjectName: Unknown exception");
  }
  return dub_error(L);
}

/** QVariant QObject::property(const char *name)
 * bind/QObject.h:9
 */
static int Action_property(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    const char *name = dub_checkstring(L, 2);
    return pushVariantInLua(L, self->property(name));
  } catch (std::exception &e) {
    lua_pushfstring(L, "property: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "property: Unknown exception");
  }
  return dub_error(L);
}

/** bool QObject::setProperty(const char *name, const QVariant &value)
 * bind/QObject.h:10
 */
static int Action_setProperty(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    const char *name = dub_checkstring(L, 2);
    QVariant value(variantFromLua(L, 3));
    lua_pushboolean(L, self->setProperty(name, value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setProperty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setProperty: Unknown exception");
  }
  return dub_error(L);
}

/** void QObject::setParent(QObject *parent)
 * bind/QObject.h:11
 */
static int Action_setParent(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    QObject *parent = *((QObject **)dub_checksdata(L, 2, "mimas.QObject"));
    self->setParent(parent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub_error(L);
}

/** QObject* QObject::parent()
 * bind/QObject.h:12
 */
static int Action_parent(lua_State *L) {
  try {
    Action *self = *((Action **)dub_checksdata(L, 1, "mimas.Action"));
    QObject *retval__ = self->parent();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "mimas.QObject", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "parent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "parent: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Action___tostring(lua_State *L) {
  Action *self = *((Action **)dub_checksdata_n(L, 1, "mimas.Action"));
  lua_pushfstring(L, "mimas.Action: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Action_member_methods[] = {
  { "_cast_"       , Action__cast_        },
  { "new"          , Action_Action        },
  { "setShortcut"  , Action_setShortcut   },
  { "setMenuRole"  , Action_setMenuRole   },
  { "__gc"         , Action__Action       },
  { "text"         , Action_text          },
  { "setText"      , Action_setText       },
  { "isChecked"    , Action_isChecked     },
  { "setChecked"   , Action_setChecked    },
  { "isEnabled"    , Action_isEnabled     },
  { "setEnabled"   , Action_setEnabled    },
  { "isCheckable"  , Action_isCheckable   },
  { "setCheckable" , Action_setCheckable  },
  { "objectName"   , Action_objectName    },
  { "setObjectName", Action_setObjectName },
  { "property"     , Action_property      },
  { "setProperty"  , Action_setProperty   },
  { "setParent"    , Action_setParent     },
  { "parent"       , Action_parent        },
  { "__tostring"   , Action___tostring    },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Action(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Action");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Action_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Action_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
