/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ListView
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/ListView.h"


/** Cast (class_name)
 * 
 */
static int ListView__cast_(lua_State *L) {

  ListView *self = *((ListView **)dub_checksdata_n(L, 1, "mimas.ListView"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** ListView::ListView()
 * include/mimas/ListView.h:54
 */
static int ListView_ListView(lua_State *L) {
  try {
    ListView *retval__ = new ListView();
    retval__->pushobject(L, retval__, "mimas.ListView", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ListView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ListView: Unknown exception");
  }
  return dub_error(L);
}

/** ListView::~ListView()
 * include/mimas/ListView.h:56
 */
static int ListView__ListView(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.ListView"));
    if (userdata->gc) {
      ListView *self = (ListView *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~ListView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~ListView: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize ListView::selectedIndexes(lua_State *L)
 * include/mimas/ListView.h:63
 */
static int ListView_selectedIndexes(lua_State *L) {
  try {
    ListView *self = *((ListView **)dub_checksdata(L, 1, "mimas.ListView"));
    return self->selectedIndexes(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "selectedIndexes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "selectedIndexes: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize ListView::indexAt(float x, float y, lua_State *L)
 * include/mimas/ListView.h:86
 */
static int ListView_indexAt(lua_State *L) {
  try {
    ListView *self = *((ListView **)dub_checksdata(L, 1, "mimas.ListView"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    return self->indexAt(x, y, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "indexAt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "indexAt: Unknown exception");
  }
  return dub_error(L);
}

/** void ListView::selectRow(int row)
 * include/mimas/ListView.h:98
 */
static int ListView_selectRow(lua_State *L) {
  try {
    ListView *self = *((ListView **)dub_checksdata(L, 1, "mimas.ListView"));
    int row = dub_checkint(L, 2);
    self->selectRow(row);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "selectRow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "selectRow: Unknown exception");
  }
  return dub_error(L);
}

/** void ListView::enablePaintItem(bool enable)
 * include/mimas/ListView.h:129
 */
static int ListView_enablePaintItem(lua_State *L) {
  try {
    ListView *self = *((ListView **)dub_checksdata(L, 1, "mimas.ListView"));
    bool enable = dub_checkboolean(L, 2);
    self->enablePaintItem(enable);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enablePaintItem: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enablePaintItem: Unknown exception");
  }
  return dub_error(L);
}

/** void ListView::enableHtml(bool enable, const char *css=NULL)
 * include/mimas/ListView.h:134
 */
static int ListView_enableHtml(lua_State *L) {
  try {
    ListView *self = *((ListView **)dub_checksdata(L, 1, "mimas.ListView"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      bool enable = dub_checkboolean(L, 2);
      const char *css = dub_checkstring(L, 3);
      self->enableHtml(enable, css);
      return 0;
    } else {
      bool enable = dub_checkboolean(L, 2);
      self->enableHtml(enable);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableHtml: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableHtml: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ListView___tostring(lua_State *L) {
  ListView *self = *((ListView **)dub_checksdata_n(L, 1, "mimas.ListView"));
  lua_pushfstring(L, "mimas.ListView: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ListView_member_methods[] = {
  { "_cast_"       , ListView__cast_      },
  { "new"          , ListView_ListView    },
  { "__gc"         , ListView__ListView   },
  { "selectedIndexes", ListView_selectedIndexes },
  { "indexAt"      , ListView_indexAt     },
  { "selectRow"    , ListView_selectRow   },
  { "enablePaintItem", ListView_enablePaintItem },
  { "enableHtml"   , ListView_enableHtml  },
  { "__tostring"   , ListView___tostring  },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_ListView(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.ListView");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ListView_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "ListView");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
