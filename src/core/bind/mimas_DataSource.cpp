/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class DataSource
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/DataSource.h"


/** DataSource::DataSource()
 * include/mimas/DataSource.h:51
 */
static int DataSource_DataSource(lua_State *L) {
  try {
    DataSource *retval__ = new DataSource();
    retval__->pushobject(L, retval__, "mimas.DataSource", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DataSource: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DataSource: Unknown exception");
  }
  return dub_error(L);
}

/** DataSource::~DataSource()
 * include/mimas/DataSource.h:54
 */
static int DataSource__DataSource(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.DataSource"));
    if (userdata->gc) {
      DataSource *self = (DataSource *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~DataSource: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~DataSource: Unknown exception");
  }
  return dub_error(L);
}

/** void DataSource::reset()
 * include/mimas/DataSource.h:57
 */
static int DataSource_reset(lua_State *L) {
  try {
    DataSource *self = *((DataSource **)dub_checksdata(L, 1, "mimas.DataSource"));
    self->reset();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reset: Unknown exception");
  }
  return dub_error(L);
}

/** void DataSource::emitLayoutChanged()
 * include/mimas/DataSource.h:63
 */
static int DataSource_emitLayoutChanged(lua_State *L) {
  try {
    DataSource *self = *((DataSource **)dub_checksdata(L, 1, "mimas.DataSource"));
    self->emitLayoutChanged();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "emitLayoutChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "emitLayoutChanged: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int DataSource___tostring(lua_State *L) {
  DataSource *self = *((DataSource **)dub_checksdata_n(L, 1, "mimas.DataSource"));
  lua_pushfstring(L, "mimas.DataSource: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg DataSource_member_methods[] = {
  { "new"          , DataSource_DataSource },
  { "__gc"         , DataSource__DataSource },
  { "reset"        , DataSource_reset     },
  { "emitLayoutChanged", DataSource_emitLayoutChanged },
  { "__tostring"   , DataSource___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_DataSource(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.DataSource");
  // <mt>

  // register member methods
  luaL_register(L, NULL, DataSource_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "DataSource_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
