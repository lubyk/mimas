/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class VBoxLayout
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/VBoxLayout.h"


/** Cast (class_name)
 * 
 */
static int VBoxLayout__cast_(lua_State *L) {

  VBoxLayout *self = *((VBoxLayout **)dub_checksdata_n(L, 1, "mimas.VBoxLayout"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** VBoxLayout::VBoxLayout(QWidget *parent=NULL)
 * include/mimas/VBoxLayout.h:49
 */
static int VBoxLayout_VBoxLayout(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      QWidget *parent = *((QWidget **)dub_checksdata(L, 1, "mimas.QWidget"));
      VBoxLayout *retval__ = new VBoxLayout(parent);
      retval__->pushobject(L, retval__, "mimas.VBoxLayout", true);
      return 1;
    } else {
      VBoxLayout *retval__ = new VBoxLayout();
      retval__->pushobject(L, retval__, "mimas.VBoxLayout", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "VBoxLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "VBoxLayout: Unknown exception");
  }
  return dub_error(L);
}

/** VBoxLayout::~VBoxLayout()
 * include/mimas/VBoxLayout.h:52
 */
static int VBoxLayout__VBoxLayout(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.VBoxLayout"));
    if (userdata->gc) {
      VBoxLayout *self = (VBoxLayout *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~VBoxLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~VBoxLayout: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addWidget(QWidget *widget, int stretch=0, int alignment=0)
 * include/mimas/VBoxLayout.h:55
 */
static int VBoxLayout_addWidget(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      int stretch = dub_checkint(L, 3);
      int alignment = dub_checkint(L, 4);
      self->addWidget(widget, stretch, alignment);
      return 0;
    } else if (top__ >= 3) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      int stretch = dub_checkint(L, 3);
      self->addWidget(widget, stretch);
      return 0;
    } else {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      self->addWidget(widget);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::insertWidget(int pos, QWidget *widget, int stretch=0, int alignment=0)
 * include/mimas/VBoxLayout.h:59
 */
static int VBoxLayout_insertWidget(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      int stretch = dub_checkint(L, 4);
      int alignment = dub_checkint(L, 5);
      self->insertWidget(pos, widget, stretch, alignment);
      return 0;
    } else if (top__ >= 4) {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      int stretch = dub_checkint(L, 4);
      self->insertWidget(pos, widget, stretch);
      return 0;
    } else {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      self->insertWidget(pos, widget);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insertWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insertWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addLayout(QLayout *layout, int stretch=0)
 * include/mimas/VBoxLayout.h:70
 */
static int VBoxLayout_addLayout(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      QLayout *layout = *((QLayout **)dub_checksdata(L, 2, "mimas.QLayout"));
      int stretch = dub_checkint(L, 3);
      self->addLayout(layout, stretch);
      return 0;
    } else {
      QLayout *layout = *((QLayout **)dub_checksdata(L, 2, "mimas.QLayout"));
      self->addLayout(layout);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addLayout: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::insertLayout(int pos, QLayout *layout, int stretch=0)
 * include/mimas/VBoxLayout.h:74
 */
static int VBoxLayout_insertLayout(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int pos = dub_checkint(L, 2);
      QLayout *layout = *((QLayout **)dub_checksdata(L, 3, "mimas.QLayout"));
      int stretch = dub_checkint(L, 4);
      self->insertLayout(pos, layout, stretch);
      return 0;
    } else {
      int pos = dub_checkint(L, 2);
      QLayout *layout = *((QLayout **)dub_checksdata(L, 3, "mimas.QLayout"));
      self->insertLayout(pos, layout);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insertLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insertLayout: Unknown exception");
  }
  return dub_error(L);
}

/** bool VBoxLayout::setAlignment(QWidget *w, int alignment)
 * include/mimas/VBoxLayout.h:88
 */
static int VBoxLayout_setAlignment(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    QWidget *w = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
    int alignment = dub_checkint(L, 3);
    lua_pushboolean(L, self->setAlignment(w, alignment));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAlignment: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAlignment: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addStretch(int stretch=1)
 * include/mimas/VBoxLayout.h:94
 */
static int VBoxLayout_addStretch(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int stretch = dub_checkint(L, 2);
      self->addStretch(stretch);
      return 0;
    } else {
      self->addStretch();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addStretch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addStretch: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addSpacing(int size)
 * include/mimas/VBoxLayout.h:100
 */
static int VBoxLayout_addSpacing(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int size = dub_checkint(L, 2);
    self->addSpacing(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::setSpacing(int space)
 * include/mimas/VBoxLayout.h:106
 */
static int VBoxLayout_setSpacing(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int space = dub_checkint(L, 2);
    self->setSpacing(space);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::setContentsMargins(int left, int top, int right, int bottom)
 * include/mimas/VBoxLayout.h:110
 */
static int VBoxLayout_setContentsMargins(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int left = dub_checkint(L, 2);
    int top = dub_checkint(L, 3);
    int right = dub_checkint(L, 4);
    int bottom = dub_checkint(L, 5);
    self->setContentsMargins(left, top, right, bottom);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setContentsMargins: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setContentsMargins: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::activate()
 * include/mimas/VBoxLayout.h:114
 */
static int VBoxLayout_activate(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->activate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize VBoxLayout::minimumSize(lua_State *L) const
 * include/mimas/VBoxLayout.h:118
 */
static int VBoxLayout_minimumSize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    return self->minimumSize(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "minimumSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "minimumSize: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int VBoxLayout___tostring(lua_State *L) {
  VBoxLayout *self = *((VBoxLayout **)dub_checksdata_n(L, 1, "mimas.VBoxLayout"));
  lua_pushfstring(L, "mimas.VBoxLayout: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg VBoxLayout_member_methods[] = {
  { "_cast_"       , VBoxLayout__cast_    },
  { "new"          , VBoxLayout_VBoxLayout },
  { "__gc"         , VBoxLayout__VBoxLayout },
  { "addWidget"    , VBoxLayout_addWidget },
  { "insertWidget" , VBoxLayout_insertWidget },
  { "addLayout"    , VBoxLayout_addLayout },
  { "insertLayout" , VBoxLayout_insertLayout },
  { "setAlignment" , VBoxLayout_setAlignment },
  { "addStretch"   , VBoxLayout_addStretch },
  { "addSpacing"   , VBoxLayout_addSpacing },
  { "setSpacing"   , VBoxLayout_setSpacing },
  { "setContentsMargins", VBoxLayout_setContentsMargins },
  { "activate"     , VBoxLayout_activate  },
  { "minimumSize"  , VBoxLayout_minimumSize },
  { "__tostring"   , VBoxLayout___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_VBoxLayout(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.VBoxLayout");
  // <mt>

  // register member methods
  luaL_register(L, NULL, VBoxLayout_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "VBoxLayout_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
