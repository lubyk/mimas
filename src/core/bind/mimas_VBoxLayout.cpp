/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class VBoxLayout
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/VBoxLayout.h"


/** Cast (class_name)
 * 
 */
static int VBoxLayout__cast_(lua_State *L) {

  VBoxLayout *self = *((VBoxLayout **)dub_checksdata_n(L, 1, "mimas.VBoxLayout"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 3);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "mimas.QObject")) break;
      *retval__ = static_cast<QObject *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "mimas.QWidget")) break;
      *retval__ = static_cast<QWidget *>(self);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "mimas.QLayout")) break;
      *retval__ = static_cast<QLayout *>(self);
      return 1;
    }
  }
  return 0;
}

/** VBoxLayout::VBoxLayout(QWidget *parent=NULL)
 * include/mimas/VBoxLayout.h:49
 */
static int VBoxLayout_VBoxLayout(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      QWidget *parent = *((QWidget **)dub_checksdata(L, 1, "mimas.QWidget"));
      VBoxLayout *retval__ = new VBoxLayout(parent);
      retval__->pushobject(L, retval__, "mimas.VBoxLayout", true);
      return 1;
    } else {
      VBoxLayout *retval__ = new VBoxLayout();
      retval__->pushobject(L, retval__, "mimas.VBoxLayout", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "VBoxLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "VBoxLayout: Unknown exception");
  }
  return dub_error(L);
}

/** VBoxLayout::~VBoxLayout()
 * include/mimas/VBoxLayout.h:52
 */
static int VBoxLayout__VBoxLayout(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.VBoxLayout"));
    if (userdata->gc) {
      VBoxLayout *self = (VBoxLayout *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~VBoxLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~VBoxLayout: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addWidget(QWidget *widget, int stretch=0, int alignment=0)
 * include/mimas/VBoxLayout.h:55
 */
static int VBoxLayout_addWidget(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      int stretch = dub_checkint(L, 3);
      int alignment = dub_checkint(L, 4);
      self->addWidget(widget, stretch, alignment);
      return 0;
    } else if (top__ >= 3) {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      int stretch = dub_checkint(L, 3);
      self->addWidget(widget, stretch);
      return 0;
    } else {
      QWidget *widget = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
      self->addWidget(widget);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::insertWidget(int pos, QWidget *widget, int stretch=0, int alignment=0)
 * include/mimas/VBoxLayout.h:59
 */
static int VBoxLayout_insertWidget(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      int stretch = dub_checkint(L, 4);
      int alignment = dub_checkint(L, 5);
      self->insertWidget(pos, widget, stretch, alignment);
      return 0;
    } else if (top__ >= 4) {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      int stretch = dub_checkint(L, 4);
      self->insertWidget(pos, widget, stretch);
      return 0;
    } else {
      int pos = dub_checkint(L, 2);
      QWidget *widget = *((QWidget **)dub_checksdata(L, 3, "mimas.QWidget"));
      self->insertWidget(pos, widget);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insertWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insertWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addLayout(QLayout *layout, int stretch=0)
 * include/mimas/VBoxLayout.h:70
 */
static int VBoxLayout_addLayout(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      QLayout *layout = *((QLayout **)dub_checksdata(L, 2, "mimas.QLayout"));
      int stretch = dub_checkint(L, 3);
      self->addLayout(layout, stretch);
      return 0;
    } else {
      QLayout *layout = *((QLayout **)dub_checksdata(L, 2, "mimas.QLayout"));
      self->addLayout(layout);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addLayout: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::insertLayout(int pos, QLayout *layout, int stretch=0)
 * include/mimas/VBoxLayout.h:74
 */
static int VBoxLayout_insertLayout(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int pos = dub_checkint(L, 2);
      QLayout *layout = *((QLayout **)dub_checksdata(L, 3, "mimas.QLayout"));
      int stretch = dub_checkint(L, 4);
      self->insertLayout(pos, layout, stretch);
      return 0;
    } else {
      int pos = dub_checkint(L, 2);
      QLayout *layout = *((QLayout **)dub_checksdata(L, 3, "mimas.QLayout"));
      self->insertLayout(pos, layout);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insertLayout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insertLayout: Unknown exception");
  }
  return dub_error(L);
}

/** bool VBoxLayout::setAlignment(QWidget *w, int alignment)
 * include/mimas/VBoxLayout.h:88
 */
static int VBoxLayout_setAlignment(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    QWidget *w = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
    int alignment = dub_checkint(L, 3);
    lua_pushboolean(L, self->setAlignment(w, alignment));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAlignment: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAlignment: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addStretch(int stretch=1)
 * include/mimas/VBoxLayout.h:94
 */
static int VBoxLayout_addStretch(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int stretch = dub_checkint(L, 2);
      self->addStretch(stretch);
      return 0;
    } else {
      self->addStretch();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addStretch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addStretch: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::addSpacing(int size)
 * include/mimas/VBoxLayout.h:100
 */
static int VBoxLayout_addSpacing(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int size = dub_checkint(L, 2);
    self->addSpacing(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::setSpacing(int space)
 * include/mimas/VBoxLayout.h:106
 */
static int VBoxLayout_setSpacing(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int space = dub_checkint(L, 2);
    self->setSpacing(space);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::setContentsMargins(int left, int top, int right, int bottom)
 * include/mimas/VBoxLayout.h:110
 */
static int VBoxLayout_setContentsMargins(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int left = dub_checkint(L, 2);
    int top = dub_checkint(L, 3);
    int right = dub_checkint(L, 4);
    int bottom = dub_checkint(L, 5);
    self->setContentsMargins(left, top, right, bottom);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setContentsMargins: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setContentsMargins: Unknown exception");
  }
  return dub_error(L);
}

/** void VBoxLayout::activate()
 * include/mimas/VBoxLayout.h:114
 */
static int VBoxLayout_activate(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->activate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize VBoxLayout::minimumSize(lua_State *L) const
 * include/mimas/VBoxLayout.h:118
 */
static int VBoxLayout_minimumSize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    return self->minimumSize(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "minimumSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "minimumSize: Unknown exception");
  }
  return dub_error(L);
}

/** QString QObject::objectName() const
 * bind/QObject.h:7
 */
static int VBoxLayout_objectName(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    QByteArray s_self->objectName()_(self->objectName().toUtf8());
    lua_pushlstring(L, s_self->objectName()_.constData(), s_self->objectName()_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "objectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "objectName: Unknown exception");
  }
  return dub_error(L);
}

/** void QObject::setObjectName(const QString &name)
 * bind/QObject.h:8
 */
static int VBoxLayout_setObjectName(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    size_t name_sz_;
    const char *name = dub_checklstring(L, 2, &name_sz_);
    
    self->setObjectName(QString::fromUtf8(name, name_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setObjectName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setObjectName: Unknown exception");
  }
  return dub_error(L);
}

/** QVariant QObject::property(const char *name)
 * bind/QObject.h:9
 */
static int VBoxLayout_property(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *name = dub_checkstring(L, 2);
    pushVariantInLua(L, self->property(name))
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "property: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "property: Unknown exception");
  }
  return dub_error(L);
}

/** bool QObject::setProperty(const char *name, const QVariant &value)
 * bind/QObject.h:10
 */
static int VBoxLayout_setProperty(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *name = dub_checkstring(L, 2);
    QVariant value(variantFromLua(L, 3));
    lua_pushboolean(L, self->setProperty(name, value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setProperty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setProperty: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::move(int x, int y)
 * bind/QWidget.h:10
 */
static int VBoxLayout_move(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    self->move(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "move: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::resize(int w, int h)
 * bind/QWidget.h:11
 */
static int VBoxLayout_resize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    self->resize(w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resize: Unknown exception");
  }
  return dub_error(L);
}

/** int QWidget::x()
 * bind/QWidget.h:12
 */
static int VBoxLayout_x(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushnumber(L, self->x());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "x: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "x: Unknown exception");
  }
  return dub_error(L);
}

/** int QWidget::y()
 * bind/QWidget.h:13
 */
static int VBoxLayout_y(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushnumber(L, self->y());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "y: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "y: Unknown exception");
  }
  return dub_error(L);
}

/** int QWidget::width()
 * bind/QWidget.h:14
 */
static int VBoxLayout_width(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushnumber(L, self->width());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "width: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "width: Unknown exception");
  }
  return dub_error(L);
}

/** int QWidget::height()
 * bind/QWidget.h:15
 */
static int VBoxLayout_height(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushnumber(L, self->height());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "height: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "height: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setParent(QWidget *parent)
 * bind/QWidget.h:16
 */
static int VBoxLayout_setParent(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    QWidget *parent = *((QWidget **)dub_checksdata(L, 2, "mimas.QWidget"));
    self->setParent(parent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::update()
 * bind/QWidget.h:17
 */
static int VBoxLayout_update(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::adjustSize()
 * bind/QWidget.h:18
 */
static int VBoxLayout_adjustSize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->adjustSize();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "adjustSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "adjustSize: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setFocus()
 * bind/QWidget.h:19
 */
static int VBoxLayout_setFocus(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->setFocus();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFocus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFocus: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setFocusPolicy(int policy)
 * bind/QWidget.h:20
 */
static int VBoxLayout_setFocusPolicy(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int policy = dub_checkint(L, 2);
    self->setFocusPolicy(policy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFocusPolicy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFocusPolicy: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setAttribute(int attr, bool enabled)
 * bind/QWidget.h:21
 */
static int VBoxLayout_setAttribute(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int attr = dub_checkint(L, 2);
    bool enabled = dub_checkboolean(L, 3);
    self->setAttribute(attr, enabled);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setMinimumSize(float w, float h)
 * bind/QWidget.h:24
 */
static int VBoxLayout_setMinimumSize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    float w = dub_checknumber(L, 2);
    float h = dub_checknumber(L, 3);
    self->setMinimumSize(w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMinimumSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMinimumSize: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setMouseTracking(bool enable)
 * bind/QWidget.h:27
 */
static int VBoxLayout_setMouseTracking(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    bool enable = dub_checkboolean(L, 2);
    self->setMouseTracking(enable);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMouseTracking: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMouseTracking: Unknown exception");
  }
  return dub_error(L);
}

/** bool QWidget::close()
 * bind/QWidget.h:28
 */
static int VBoxLayout_close(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushboolean(L, self->close());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}

/** bool QWidget::isVisible()
 * bind/QWidget.h:29
 */
static int VBoxLayout_isVisible(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushboolean(L, self->isVisible());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isVisible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isVisible: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::show()
 * bind/QWidget.h:30
 */
static int VBoxLayout_show(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->show();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "show: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "show: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::hide()
 * bind/QWidget.h:31
 */
static int VBoxLayout_hide(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->hide();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hide: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::lower()
 * bind/QWidget.h:32
 */
static int VBoxLayout_lower(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->lower();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lower: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lower: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::raise()
 * bind/QWidget.h:33
 */
static int VBoxLayout_raise(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->raise();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "raise: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "raise: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::activateWindow()
 * bind/QWidget.h:34
 */
static int VBoxLayout_activateWindow(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->activateWindow();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "activateWindow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activateWindow: Unknown exception");
  }
  return dub_error(L);
}

/** bool QWidget::isFullScreen()
 * bind/QWidget.h:35
 */
static int VBoxLayout_isFullScreen(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    lua_pushboolean(L, self->isFullScreen());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isFullScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isFullScreen: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::addAction(Action *action)
 * bind/QWidget.h:36
 */
static int VBoxLayout_addAction(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    Action *action = *((Action **)dub_checksdata(L, 2, "mimas.Action"));
    self->addAction(action);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addAction: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setWindowTitle(const QString &text)
 * bind/QWidget.h:37
 */
static int VBoxLayout_setWindowTitle(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    size_t text_sz_;
    const char *text = dub_checklstring(L, 2, &text_sz_);
    
    self->setWindowTitle(QString::fromUtf8(text, text_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWindowTitle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWindowTitle: Unknown exception");
  }
  return dub_error(L);
}

/** QString QWidget::windowTitle()
 * bind/QWidget.h:38
 */
static int VBoxLayout_windowTitle(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    QByteArray s_self->windowTitle()_(self->windowTitle().toUtf8());
    lua_pushlstring(L, s_self->windowTitle()_.constData(), s_self->windowTitle()_.size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "windowTitle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "windowTitle: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize QWidget::size()
 * bind/QWidget.h:48
 */
static int VBoxLayout_size(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    return self->size();
  } catch (std::exception &e) {
    lua_pushfstring(L, "size: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "size: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setStyle(const char *text)
 * bind/QWidget.h:49
 */
static int VBoxLayout_setStyle(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *text = dub_checkstring(L, 2);
    self->setStyle(text);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setStyle: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setStyleSheet(const char *text)
 * bind/QWidget.h:50
 */
static int VBoxLayout_setStyleSheet(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *text = dub_checkstring(L, 2);
    self->setStyleSheet(text);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setStyleSheet: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setStyleSheet: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::textSize(const char *text)
 * bind/QWidget.h:53
 */
static int VBoxLayout_textSize(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *text = dub_checkstring(L, 2);
    self->textSize(text);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "textSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "textSize: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setCssClass(const char *css_class)
 * bind/QWidget.h:55
 */
static int VBoxLayout_setCssClass(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    const char *css_class = dub_checkstring(L, 2);
    self->setCssClass(css_class);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCssClass: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCssClass: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setSizeHit(int w, int h)
 * bind/QWidget.h:56
 */
static int VBoxLayout_setSizeHit(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    self->setSizeHit(w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSizeHit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSizeHit: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::setSizePolicy(int horizontal, int vertical)
 * bind/QWidget.h:60
 */
static int VBoxLayout_setSizePolicy(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int horizontal = dub_checkint(L, 2);
    int vertical = dub_checkint(L, 3);
    self->setSizePolicy(horizontal, vertical);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSizePolicy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSizePolicy: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::showFullScreen(bool enable=true)
 * bind/QWidget.h:62
 */
static int VBoxLayout_showFullScreen(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      bool enable = dub_checkboolean(L, 2);
      self->showFullScreen(enable);
      return 0;
    } else {
      self->showFullScreen();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "showFullScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "showFullScreen: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::swapFullScreen()
 * bind/QWidget.h:66
 */
static int VBoxLayout_swapFullScreen(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    self->swapFullScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "swapFullScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "swapFullScreen: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize QWidget::globalPosition()
 * bind/QWidget.h:70
 */
static int VBoxLayout_globalPosition(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    return self->globalPosition();
  } catch (std::exception &e) {
    lua_pushfstring(L, "globalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "globalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize QWidget::position()
 * bind/QWidget.h:75
 */
static int VBoxLayout_position(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    return self->position();
  } catch (std::exception &e) {
    lua_pushfstring(L, "position: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "position: Unknown exception");
  }
  return dub_error(L);
}

/** void QWidget::globalMove(float x, float y)
 * bind/QWidget.h:79
 */
static int VBoxLayout_globalMove(lua_State *L) {
  try {
    VBoxLayout *self = *((VBoxLayout **)dub_checksdata(L, 1, "mimas.VBoxLayout"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->globalMove(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "globalMove: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "globalMove: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int VBoxLayout___tostring(lua_State *L) {
  VBoxLayout *self = *((VBoxLayout **)dub_checksdata_n(L, 1, "mimas.VBoxLayout"));
  lua_pushfstring(L, "mimas.VBoxLayout: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg VBoxLayout_member_methods[] = {
  { "_cast_"       , VBoxLayout__cast_    },
  { "new"          , VBoxLayout_VBoxLayout },
  { "__gc"         , VBoxLayout__VBoxLayout },
  { "addWidget"    , VBoxLayout_addWidget },
  { "insertWidget" , VBoxLayout_insertWidget },
  { "addLayout"    , VBoxLayout_addLayout },
  { "insertLayout" , VBoxLayout_insertLayout },
  { "setAlignment" , VBoxLayout_setAlignment },
  { "addStretch"   , VBoxLayout_addStretch },
  { "addSpacing"   , VBoxLayout_addSpacing },
  { "setSpacing"   , VBoxLayout_setSpacing },
  { "setContentsMargins", VBoxLayout_setContentsMargins },
  { "activate"     , VBoxLayout_activate  },
  { "minimumSize"  , VBoxLayout_minimumSize },
  { "objectName"   , VBoxLayout_objectName },
  { "setObjectName", VBoxLayout_setObjectName },
  { "property"     , VBoxLayout_property  },
  { "setProperty"  , VBoxLayout_setProperty },
  { "move"         , VBoxLayout_move      },
  { "resize"       , VBoxLayout_resize    },
  { "x"            , VBoxLayout_x         },
  { "y"            , VBoxLayout_y         },
  { "width"        , VBoxLayout_width     },
  { "height"       , VBoxLayout_height    },
  { "setParent"    , VBoxLayout_setParent },
  { "update"       , VBoxLayout_update    },
  { "adjustSize"   , VBoxLayout_adjustSize },
  { "setFocus"     , VBoxLayout_setFocus  },
  { "setFocusPolicy", VBoxLayout_setFocusPolicy },
  { "setAttribute" , VBoxLayout_setAttribute },
  { "setMinimumSize", VBoxLayout_setMinimumSize },
  { "setMouseTracking", VBoxLayout_setMouseTracking },
  { "close"        , VBoxLayout_close     },
  { "isVisible"    , VBoxLayout_isVisible },
  { "show"         , VBoxLayout_show      },
  { "hide"         , VBoxLayout_hide      },
  { "lower"        , VBoxLayout_lower     },
  { "raise"        , VBoxLayout_raise     },
  { "activateWindow", VBoxLayout_activateWindow },
  { "isFullScreen" , VBoxLayout_isFullScreen },
  { "addAction"    , VBoxLayout_addAction },
  { "setWindowTitle", VBoxLayout_setWindowTitle },
  { "windowTitle"  , VBoxLayout_windowTitle },
  { "size"         , VBoxLayout_size      },
  { "setStyle"     , VBoxLayout_setStyle  },
  { "setStyleSheet", VBoxLayout_setStyleSheet },
  { "textSize"     , VBoxLayout_textSize  },
  { "setCssClass"  , VBoxLayout_setCssClass },
  { "setSizeHit"   , VBoxLayout_setSizeHit },
  { "setSizePolicy", VBoxLayout_setSizePolicy },
  { "showFullScreen", VBoxLayout_showFullScreen },
  { "swapFullScreen", VBoxLayout_swapFullScreen },
  { "globalPosition", VBoxLayout_globalPosition },
  { "position"     , VBoxLayout_position  },
  { "globalMove"   , VBoxLayout_globalMove },
  { "__tostring"   , VBoxLayout___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_VBoxLayout(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.VBoxLayout");
  // <mt>

  // register member methods
  luaL_register(L, NULL, VBoxLayout_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "VBoxLayout_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
