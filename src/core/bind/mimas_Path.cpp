/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Path
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/Path.h"


/** Cast (class_name)
 * 
 */
static int Path__cast_(lua_State *L) {

  Path *self = *((Path **)dub_checksdata_n(L, 1, "mimas.Path"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "mimas.QPainterPath")) break;
      *retval__ = static_cast<QPainterPath *>(self);
      return 1;
    }
  }
  return 0;
}

/** Path::Path()
 * include/mimas/Path.h:43
 */
static int Path_Path(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      QPainterPath *path = *((QPainterPath **)dub_checksdata(L, 1, "mimas.QPainterPath"));
      Path *retval__ = new Path(*path);
      dub_pushudata(L, retval__, "mimas.Path", true);
      return 1;
    } else {
      Path *retval__ = new Path();
      dub_pushudata(L, retval__, "mimas.Path", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Path: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Path: Unknown exception");
  }
  return dub_error(L);
}

/** Path::~Path()
 * include/mimas/Path.h:50
 */
static int Path__Path(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.Path"));
    if (userdata->gc) {
      Path *self = (Path *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Path: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Path: Unknown exception");
  }
  return dub_error(L);
}

/** Path Path::outlineForWidth(float width)
 * include/mimas/Path.h:60
 */
static int Path_outlineForWidth(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float width = dub_checknumber(L, 2);
    dub_pushudata(L, new Path(self->outlineForWidth(width)), "mimas.Path", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "outlineForWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "outlineForWidth: Unknown exception");
  }
  return dub_error(L);
}

/** bool Path::contains(float x, float y)
 * include/mimas/Path.h:72
 */
static int Path_contains(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    lua_pushboolean(L, self->contains(x, y));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contains: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contains: Unknown exception");
  }
  return dub_error(L);
}

/** void QPainterPath::moveTo(float x, float y)
 * bind/QPainterPath.h:8
 */
static int Path_moveTo(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->moveTo(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "moveTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "moveTo: Unknown exception");
  }
  return dub_error(L);
}

/** void QPainterPath::cubicTo(float c1X, float c1Y, float c2X, float c2Y, float endPointX, float endPointY)
 * bind/QPainterPath.h:12
 */
static int Path_cubicTo(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float c1X = dub_checknumber(L, 2);
    float c1Y = dub_checknumber(L, 3);
    float c2X = dub_checknumber(L, 4);
    float c2Y = dub_checknumber(L, 5);
    float endPointX = dub_checknumber(L, 6);
    float endPointY = dub_checknumber(L, 7);
    self->cubicTo(c1X, c1Y, c2X, c2Y, endPointX, endPointY);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "cubicTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "cubicTo: Unknown exception");
  }
  return dub_error(L);
}

/** void QPainterPath::addRect(float x, float y, float w, float h)
 * bind/QPainterPath.h:14
 */
static int Path_addRect(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float w = dub_checknumber(L, 4);
    float h = dub_checknumber(L, 5);
    self->addRect(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addRect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addRect: Unknown exception");
  }
  return dub_error(L);
}

/** void QPainterPath::lineTo(float x, float y)
 * bind/QPainterPath.h:16
 */
static int Path_lineTo(lua_State *L) {
  try {
    Path *self = *((Path **)dub_checksdata(L, 1, "mimas.Path"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->lineTo(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lineTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lineTo: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Path___tostring(lua_State *L) {
  Path *self = *((Path **)dub_checksdata_n(L, 1, "mimas.Path"));
  lua_pushfstring(L, "mimas.Path: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Path_member_methods[] = {
  { "_cast_"       , Path__cast_          },
  { "new"          , Path_Path            },
  { "__gc"         , Path__Path           },
  { "outlineForWidth", Path_outlineForWidth },
  { "contains"     , Path_contains        },
  { "moveTo"       , Path_moveTo          },
  { "cubicTo"      , Path_cubicTo         },
  { "addRect"      , Path_addRect         },
  { "lineTo"       , Path_lineTo          },
  { "__tostring"   , Path___tostring      },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_Path(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.Path");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Path_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "Path", "Path");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
