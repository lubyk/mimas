/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class GLWidget
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/GLWidget.h"


/** Cast (class_name)
 * 
 */
static int GLWidget__cast_(lua_State *L) {

  GLWidget *self = *((GLWidget **)dub_checksdata_n(L, 1, "mimas.GLWidget"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** GLWidget::GLWidget()
 * include/mimas/GLWidget.h:91
 */
static int GLWidget_GLWidget(lua_State *L) {
  try {
    GLWidget *retval__ = new GLWidget();
    retval__->pushobject(L, retval__, "mimas.GLWidget", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GLWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GLWidget: Unknown exception");
  }
  return dub_error(L);
}

/** GLWidget::~GLWidget()
 * include/mimas/GLWidget.h:97
 */
static int GLWidget__GLWidget(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.GLWidget"));
    if (userdata->gc) {
      GLWidget *self = (GLWidget *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~GLWidget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~GLWidget: Unknown exception");
  }
  return dub_error(L);
}

/** void GLWidget::update()
 * include/mimas/GLWidget.h:104
 */
static int GLWidget_update(lua_State *L) {
  try {
    GLWidget *self = *((GLWidget **)dub_checksdata(L, 1, "mimas.GLWidget"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize GLWidget::openGLVersion(lua_State *L)
 * include/mimas/GLWidget.h:108
 */
static int GLWidget_openGLVersion(lua_State *L) {
  try {
    GLWidget *self = *((GLWidget **)dub_checksdata(L, 1, "mimas.GLWidget"));
    return self->openGLVersion(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "openGLVersion: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "openGLVersion: Unknown exception");
  }
  return dub_error(L);
}

/** bool GLWidget::compile(const char *vertex_shader, const char *fragment_shader)
 * include/mimas/GLWidget.h:114
 */
static int GLWidget_compile(lua_State *L) {
  try {
    GLWidget *self = *((GLWidget **)dub_checksdata(L, 1, "mimas.GLWidget"));
    const char *vertex_shader = dub_checkstring(L, 2);
    const char *fragment_shader = dub_checkstring(L, 3);
    lua_pushboolean(L, self->compile(vertex_shader, fragment_shader));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "compile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "compile: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int GLWidget___tostring(lua_State *L) {
  GLWidget *self = *((GLWidget **)dub_checksdata_n(L, 1, "mimas.GLWidget"));
  lua_pushfstring(L, "mimas.GLWidget: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg GLWidget_member_methods[] = {
  { "_cast_"       , GLWidget__cast_      },
  { "new"          , GLWidget_GLWidget    },
  { "__gc"         , GLWidget__GLWidget   },
  { "update"       , GLWidget_update      },
  { "openGLVersion", GLWidget_openGLVersion },
  { "compile"      , GLWidget_compile     },
  { "__tostring"   , GLWidget___tostring  },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_GLWidget(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.GLWidget");
  // <mt>

  // register member methods
  luaL_register(L, NULL, GLWidget_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "GLWidget");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
