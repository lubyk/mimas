/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class MainWindow
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mimas/MainWindow.h"


/** Cast (class_name)
 * 
 */
static int MainWindow__cast_(lua_State *L) {

  MainWindow *self = *((MainWindow **)dub_checksdata_n(L, 1, "mimas.MainWindow"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  return 0;
}

/** MainWindow::MainWindow()
 * include/mimas/MainWindow.h:53
 */
static int MainWindow_MainWindow(lua_State *L) {
  try {
    MainWindow *retval__ = new MainWindow();
    retval__->pushobject(L, retval__, "mimas.MainWindow", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "MainWindow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "MainWindow: Unknown exception");
  }
  return dub_error(L);
}

/** MainWindow::~MainWindow()
 * include/mimas/MainWindow.h:57
 */
static int MainWindow__MainWindow(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mimas.MainWindow"));
    if (userdata->gc) {
      MainWindow *self = (MainWindow *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~MainWindow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~MainWindow: Unknown exception");
  }
  return dub_error(L);
}

/** void MainWindow::testMenus(bool inplace, lua_State *L)
 * include/mimas/MainWindow.h:60
 */
static int MainWindow_testMenus(lua_State *L) {
  try {
    MainWindow *self = *((MainWindow **)dub_checksdata(L, 1, "mimas.MainWindow"));
    bool inplace = dub_checkboolean(L, 2);
    self->testMenus(inplace, L);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "testMenus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "testMenus: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize MainWindow::getOpenFileName(const char *caption, const char *base_dir, const char *filter, int options, lua_State *L)
 * include/mimas/MainWindow.h:67
 */
static int MainWindow_getOpenFileName(lua_State *L) {
  try {
    MainWindow *self = *((MainWindow **)dub_checksdata(L, 1, "mimas.MainWindow"));
    const char *caption = dub_checkstring(L, 2);
    const char *base_dir = dub_checkstring(L, 3);
    const char *filter = dub_checkstring(L, 4);
    int options = dub_checkint(L, 5);
    return self->getOpenFileName(caption, base_dir, filter, options, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOpenFileName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOpenFileName: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize MainWindow::getExistingDirectory(const char *caption, const char *base_dir, int options, lua_State *L)
 * include/mimas/MainWindow.h:72
 */
static int MainWindow_getExistingDirectory(lua_State *L) {
  try {
    MainWindow *self = *((MainWindow **)dub_checksdata(L, 1, "mimas.MainWindow"));
    const char *caption = dub_checkstring(L, 2);
    const char *base_dir = dub_checkstring(L, 3);
    int options = dub_checkint(L, 4);
    return self->getExistingDirectory(caption, base_dir, options, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "getExistingDirectory: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getExistingDirectory: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int MainWindow___tostring(lua_State *L) {
  MainWindow *self = *((MainWindow **)dub_checksdata_n(L, 1, "mimas.MainWindow"));
  lua_pushfstring(L, "mimas.MainWindow: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg MainWindow_member_methods[] = {
  { "_cast_"       , MainWindow__cast_    },
  { "new"          , MainWindow_MainWindow },
  { "__gc"         , MainWindow__MainWindow },
  { "testMenus"    , MainWindow_testMenus },
  { "getOpenFileName", MainWindow_getOpenFileName },
  { "getExistingDirectory", MainWindow_getExistingDirectory },
  { "__tostring"   , MainWindow___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mimas_MainWindow(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mimas.MainWindow");
  // <mt>

  // register member methods
  luaL_register(L, NULL, MainWindow_member_methods);
  // save meta-table in mimas
  dub_register(L, "mimas", "MainWindow");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
